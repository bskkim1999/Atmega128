#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdio.h>
#include <string.h>
#include <util/atomic.h>
#include "UART0.h"

FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);
FILE INPUT = FDEV_SETUP_STREAM(NULL, UART0_receive, _FDEV_SETUP_READ);


volatile int count = 0;


ISR(INT0_vect){
	//설명:인터럽트 서비스 루틴이 실행되는 도중에 다음 인터럽트가 발생하게 되면 안되므로, ATOMIC_BLOCK을 사용하였다.
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
		if(count >= 1000) {
			cli();
			return 0;
		}
		
		else{
			count = count + 1;
			printf("%d \r\n", count);
		}
	}
	
		
}




void INIT_INT0(void){
	
	EIMSK = 0x01;   //external interrupt INT0(PD0)
	EICRA = 0x03;  //rising edge
	sei();  //global interrupt(accept) 
	
	
	
}

int main(void){
	
	stdout = &OUTPUT;
	stdin = &INPUT;
	
	/*variable*/
	
	
	/*uart*/
	UART0_init();
	
	/*gpio*/
	DDRD = 0x00;  //input
	//PORTD = 0x01; //pull up resistor
	
	/*timer&counter*/
	
	
	INIT_INT0();
	
	/* Replace with your application code */
	while (1) {
		
		
	}
	
	printf("finish!");
	return 0;
}
